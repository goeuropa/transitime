# This workflow will build a Java project with Maven, and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-maven

# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

name: Java CI with Maven

on:
  push:
    branches: [ "main", "refactoring" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3
        name: Checkout

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: maven

      - name: Build with Maven
        run: mvn -B package --file pom.xml

    # Optional: Uploads the full dependency graph to GitHub to improve the quality of Dependabot alerts this repository can receive
  #    - name: Update dependency graph
  #      uses: advanced-security/maven-dependency-submission-action@571e99aab1055c2e71a1e2309b9691de18d6b7d6

  container-image:
    if: github.repository_owner == 'goeuropa' && github.event_name == 'push' && (github.ref == 'refs/heads/main')
    runs-on: ubuntu-latest
    needs:
      - build
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: 17
          distribution: temurin
          cache: maven
      - uses: actions/setup-node@v4
        with:
          node-version: 18
      - name: Build container image with Jib, push to Dockerhub
        env:
          CONTAINER_REPO: docker.io/wkulesza/transitclock-server
          CONTAINER_REGISTRY_USER: ${{secrets.DOCKER_USER}}
          CONTAINER_REGISTRY_PASSWORD: ${{secrets.DOCKER_AUTH}}
        run: |
          # we give the container two tags
          #   - "latest"
          #   - a string like "2.3_2022-12-12T21-38"

          version_with_snapshot=`mvn -q help:evaluate -Dexpression=project.version -q -DforceStdout`
          version=${version_with_snapshot/-SNAPSHOT/}

          image_version=${version}

          ## if the Maven version contains SNAPSHOT, then add date to tag
          if [[ $version_with_snapshot == *"SNAPSHOT"* ]]; then
            image_date=`date +%Y-%m-%dT%H-%M`
            image_version="${version}_${image_date}"
            echo "Maven version ${version_with_snapshot} contains SNAPSHOT, adding date to container image tag"
          fi

          mvn install jib:build -Djib.to.tags=latest,$image_version
